// <auto-generated />
using System;
using Courses.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Courses.Migrations
{
    [DbContext(typeof(CoursesDbContext))]
    partial class CoursesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Courses.Domain.Entitites.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherRFC")
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("CycleId");

                    b.HasIndex("TeacherRFC");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Courses.Domain.Entitites.Cycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("Courses.Domain.Entitites.Teacher", b =>
                {
                    b.Property<string>("RFC")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RFC");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Courses.Domain.Entitites.Course", b =>
                {
                    b.HasOne("Courses.Domain.Entitites.Cycle", "Cycle")
                        .WithMany("Courses")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Courses.Domain.Entitites.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherRFC");

                    b.OwnsMany("Courses.Domain.Entitites.Student", "Students", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("StudentKey")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasAnnotation("Relational:JsonPropertyName", "StudentId");

                            b1.HasKey("CourseId", "Id");

                            b1.ToTable("Courses");

                            b1.ToJson("Students");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("Courses.Domain.Entitites.Subject", "Subject", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int>("SubjectKey")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "SubjectId");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.ToJson("Subject");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Cycle");

                    b.Navigation("Students");

                    b.Navigation("Subject")
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Courses.Domain.Entitites.Cycle", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Courses.Domain.Entitites.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
